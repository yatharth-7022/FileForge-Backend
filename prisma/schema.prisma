
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  password String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files File[] @relation("FileOwner")
  deletedFiles File[] @relation("FileDeleter")
  sharedLinks SharedLink[] @relation("UserSharedLinks")
  folders Folder[]

  @@map("users")
}
 
model File{
  id String @id @default(uuid())
  name String
  url String
  size Int
  publicId String
  isFavorite Boolean @default(false)
  favoriteAt DateTime?
  format String
   thumbnailUuid String?  
  thumbnailUrl  String?  
  owner User @relation("FileOwner",fields: [ownerId],references: [id])
  ownerId String
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  deletedBy User? @relation("FileDeleter",fields: [deleteById],references: [id])
  deleteById String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sharedLinks SharedLink[]
  folderId String?
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@map("files")

}

model SharedLink{
  id String @id @default(cuid())
  shareToken String @unique
  fileId String
  userId String

  canView Boolean @default(true)
  canDownload Boolean @default(false)
  canEdit Boolean @default(false)
  passwordHash String? 

  expiresAt DateTime?
  maxDownloads Int?
  downloadCount Int @default(0)

  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shared_links")

  file File @relation(fields: [fileId], references: [id],onDelete: Cascade)

  user User @relation("UserSharedLinks", fields: [userId], references: [id])

}
model Folder{
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files File[]
  parentId String?
  isDeleted Boolean @default(false)
  parent Folder? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("folders")

}